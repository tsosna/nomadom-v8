// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator zod {
  provider = "pnpx zod-prisma-types"
  output   = "../src/lib/schemas/generated/"
}

enum StatusType {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum HouseType {
  SINGLE_FAMILY
  MULTI_FAMILY
  SEMI_DETACHED
  DETACHED
  DUPLEX
  APARTMENT
  STUDIO
  LOFT
  PENTHOUSE
  GARDEN_HOUSE
  COTTAGE
  BUNGALOW
  VILLA
  MANSION
}

enum RoofType {
  FLAT
  PITCHED
}

enum FacadeType {
  SHEET_METAL
  PLASTER
  BRICK
  WOOD_LIGHT
  WOOD_DARK
}

enum DimensionType {
  D2
  D3
}

enum VariantType {
  DEFAULT
  MIRROR
}

enum ImageType {
  VISUALIZATION
  FLOOR_PLAN
  SECTION_PLAN
  SITE_PLAN
  LOCALIZATION_PLAN
  ELEVATION
  INTERIOR
  SECTION
  DETAIL
  RENDERING
  PHOTO
  PROJECT
}

enum UnitType {
  SQUARE_METER
  SQUARE_FEET
}

enum FloorType {
  BASEMENT
  GROUND
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum AreaType {
  USABLE_FLOOR
  GROSS_FLOOR
  TOTAL_FLOOR
  BUILT_UP
  AUXILIARY_SPACE
  TERRACE
  BALCONY
  GARDEN
  TECHNICAL_SPACE
}

model Project {
  id               Int        @id @default(autoincrement())
  name             String // e.g. "JAPONICO 35", OPTIMO, BOSCO etc.
  slug             String     @unique
  icon             String // e.g. Flower, Leaf, Sprout, Tree, Shrub etc.
  label            String? //
  tags             String[]
  shortDescription String?
  longDescription  String?
  mainBenefits     String?
  additionalInfo   String?
  technicalInfo    String?
  usableArea       Float?
  numPeople        String?
  roofType         RoofType // flat, pitched
  houseType        HouseType // single-family, multi-family, semi-detached, detached, duplex, apartment, studio, loft, penthouse, garden-house, cottage, bungalow, villa, mansion
  status           StatusType @default(DRAFT)

  option       Option[]
  currency     Currency[]
  upload       Upload[]
  image        Image[]
  video        Video[]
  roomSchedule RoomSchedule[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model HomeType {
  id            Int           @id @default(autoincrement())
  facadeType    FacadeType? // sheet metal, plaster, brick, wood
  variantType   VariantType   @default(DEFAULT) // default, mirror
  dimensionType DimensionType @default(D2) // 2D, 3D
  image         Image[]
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@unique([facadeType, variantType, dimensionType]) 
}

model Option {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float?
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Currency {
  id        Int      @id @default(autoincrement())
  name      String
  symbol    String
  exchange  Float?
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Upload {
  id        Int      @id @default(autoincrement())
  title     String?
  filename  String
  mimetype  String?
  url       String
  hash      String   @unique
  alt       String?
  caption   String?
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Image {
  id         Int       @id @default(autoincrement())
  title      String?
  filename   String    @unique
  mimetype   String
  url        String
  hash       String    @unique
  alt        String?
  caption    String?
  imageType  ImageType
  projectId  Int
  project    Project   @relation(fields: [projectId], references: [id])
  homeTypeId Int
  homeType   HomeType? @relation(fields: [homeTypeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Video {
  id        Int      @id @default(autoincrement())
  url       String
  hash      String   @unique
  alt       String?
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model RoomSchedule {
  id        Int       @id @default(autoincrement())
  floorType FloorType
  areaType  AreaType
  name      String
  area      Float?
  unit      UnitType  @default(SQUARE_METER)
  projectId Int
  project   Project   @relation(fields: [projectId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}
